name: "OPS_TDV_action"
description: "Deploys SQL code from a solution repo to TDV"
inputs:
  TDV_USER:
    description: 'username for TDV login'
    required: true
  TDV_PASSWORD:
    description: 'password for TDV login'
    required: true
  TDV_ENV:
    description: 'environment of TDV server'
    required: true
  LIQUIBASE_COMMAND:
    description: 'The command for liquibase to execute such as update'
    required: true
  OPS_TYPE:
    description: 'The SQL types: tdv_ddl, tdv_dml, stored_proc, or all'
    required: true
  RUN_RULES_ENGINE:
    description: 'Run the Rules Engine on the SQL files or not'
    required: true
  ASSIGN_LIQUIBASE_TAG:
    description: 'Assign the tag on this run or not'
    required: true
  LIQUIBASE_TAG:
    description: 'Only if ASSIGN_LIQUIBASE_TAG is true, this tag then be used'
    required: false
    
runs:
  using: "composite"
  steps:
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies and run a python script from rep02
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest poetry
        poetry -C ${{ github.action_path }}/scripts/toml_utilities install
        poetry -C ${{ github.action_path }}/scripts/toml_utilities run obtain_build_config terraform_yaml_config $GITHUB_WORKSPACE --ops_type ${{ inputs.OPS_TYPE }} > solution_repo_config.yaml
        cat solution_repo_config.yaml
      shell: bash

    - name: Copy JDBC Driver to local folder
      run: |
        mkdir lib
        echo "cp ${{ github.action_path }}/lib/TeraJDBC__indep_indep.20.00.00.34.tar lib/"
        tar -xvf ${{ github.action_path }}/lib/TeraJDBC__indep_indep.20.00.00.34.tar -C lib/
      shell: bash
      
    - name: Get JAR files
      run: |
        curl -L https://github.com/liquibase/liquibase-teradata/releases/download/v${LB_VERSION}/liquibase-teradata-${LB_VERSION}.jar --output lib/liquibase-teradata-${LB_VERSION}.jar
      env:
        LB_VERSION: "4.29.2"
      shell: bash
      
    - name: Install liquibase
      run: |
        curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase-${LB_VERSION}.zip
        unzip -o -d liquibase liquibase-${LB_VERSION}.zip

        pushd ./liquibase/lib/
        tar xf ${{ github.action_path }}/lib/TeraJDBC__indep_indep.20.00.00.34.tar
        curl -L https://github.com/liquibase/liquibase-teradata/releases/download/v4.29.2/liquibase-teradata-4.29.2.jar --output ./liquibase-teradata-4.29.2.jar
        popd
      env:
        LB_VERSION: "4.30.0"
      shell: bash

    - name: Install yq
      run: |
        sudo snap install yq
      shell: bash

    - name: Processing the soultion repo and executing the liquibase commands
      run: |
        # Extract names from each category and store them line by line in a file
          yq eval '.[] | .[].name' solution_repo_config.yaml > names.txt
      shell: bash

    - name: Process and Execute Liquibase Commands
      run: |
        # Read and process each entry in names.txt dynamically
        while read -r line; do
          # Extract name and corresponding category (tdv_ddl, tdv_dml, etc.)
          echo "Processing category and name: $line"
          name=$(echo "$line" | cut -d':' -f2 | tr -d ' ')
          
          # Create directory and copy required files
          mkdir -p "${{ github.workspace }}/$line"
          env_upper=$(echo "${{ inputs.TDV_ENV }}" | tr '[:upper:]' '[:lower:]' )
          cp "$GITHUB_WORKSPACE/solution-repo/$name/config/${{ inputs.TDV_ENV }}/liquibase.properties" "${{ github.workspace }}/$line"
          cp "$GITHUB_WORKSPACE/solution-repo/$name/${env_upper}.changelog.xml" "${{ github.workspace }}/$line"
          
          # Navigate to the created directory
          cd "$GITHUB_WORKSPACE/$line"
    
          # Execute Liquibase commands dynamically based on inputs
          if [ "${{ inputs.LIQUIBASE_COMMAND }}" = "update" ]; then
            echo "-- Do Liquibase update for $name"
            $GITHUB_WORKSPACE/liquibase/liquibase update \
              --defaultsFile=./liquibase.properties \
              --logLevel=FINE \
              --username="${{ inputs.TDV_USER }}" \
              --password="${{ inputs.TDV_PASSWORD }}"
          elif [ "${{ inputs.LIQUIBASE_COMMAND }}" = "status" ]; then
            echo "-- Do Liquibase status for $name"
            $GITHUB_WORKSPACE/liquibase/liquibase status \
              --defaultsFile=./liquibase.properties \
              --logLevel=FINE \
              --username="${{ inputs.TDV_USER }}" \
              --password="${{ inputs.TDV_PASSWORD }}"
          elif [ "${{ inputs.LIQUIBASE_COMMAND }}" = "rollback" ] && [ -n "${{ inputs.LIQUIBASE_TAG }}" ] && [ "${{ inputs.ASSIGN_LIQUIBASE_TAG }}" = "true" ]; then
            echo "-- Do Liquibase rollback for $name"
            $GITHUB_WORKSPACE/liquibase/liquibase rollback --tag="${{ inputs.LIQUIBASE_TAG }}" \
              --defaultsFile=./liquibase.properties \
              --logLevel=FINE \
              --username="${{ inputs.TDV_USER }}" \
              --password="${{ inputs.TDV_PASSWORD }}"
          fi
          
          # Optional: Add Liquibase tag if required
          if [ "${{ inputs.ASSIGN_LIQUIBASE_TAG }}" = "true" ] && [ "${{ inputs.LIQUIBASE_COMMAND }}" = "update" ]; then
            echo "-- Do Liquibase tag for $name with tag=${{ inputs.LIQUIBASE_TAG }}"
            $GITHUB_WORKSPACE/liquibase/liquibase tag --tag="${{ inputs.LIQUIBASE_TAG }}" \
              --defaultsFile=./liquibase.properties \
              --logLevel=FINE \
              --username="${{ inputs.TDV_USER }}" \
              --password="${{ inputs.TDV_PASSWORD }}"
          fi
    
          # Return to the workspace directory for the next iteration
          cd "${{ github.workspace }}"
        done < names.txt
      shell: bash


    
